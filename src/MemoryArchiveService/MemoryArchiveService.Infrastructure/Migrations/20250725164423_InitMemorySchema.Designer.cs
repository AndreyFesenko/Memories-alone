// <auto-generated />
using System;
using MemoryArchiveService.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MemoryArchiveService.Infrastructure.Migrations
{
    [DbContext(typeof(MemoryArchiveDbContext))]
    [Migration("20250725164423_InitMemorySchema")]
    partial class InitMemorySchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("memory")
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MemoryArchiveService.Domain.Entities.MediaFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("MediaType")
                        .HasColumnType("integer");

                    b.Property<Guid>("MemoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<string>("StorageUrl")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("Id");

                    b.HasIndex("MemoryId");

                    b.ToTable("MediaFiles", "memory");
                });

            modelBuilder.Entity("MemoryArchiveService.Domain.Entities.Memory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessLevel")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Memories", "memory");
                });

            modelBuilder.Entity("MemoryArchiveService.Domain.Entities.MemoryTag", b =>
                {
                    b.Property<Guid>("MemoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.HasKey("MemoryId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("MemoryTags", "memory");
                });

            modelBuilder.Entity("MemoryArchiveService.Domain.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MemoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MemoryId");

                    b.ToTable("Tags", "memory");
                });

            modelBuilder.Entity("MemoryArchiveService.Domain.Entities.MediaFile", b =>
                {
                    b.HasOne("MemoryArchiveService.Domain.Entities.Memory", "Memory")
                        .WithMany("MediaFiles")
                        .HasForeignKey("MemoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Memory");
                });

            modelBuilder.Entity("MemoryArchiveService.Domain.Entities.MemoryTag", b =>
                {
                    b.HasOne("MemoryArchiveService.Domain.Entities.Memory", "Memory")
                        .WithMany("MemoryTags")
                        .HasForeignKey("MemoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MemoryArchiveService.Domain.Entities.Tag", "Tag")
                        .WithMany("MemoryTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Memory");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("MemoryArchiveService.Domain.Entities.Tag", b =>
                {
                    b.HasOne("MemoryArchiveService.Domain.Entities.Memory", null)
                        .WithMany("Tags")
                        .HasForeignKey("MemoryId");
                });

            modelBuilder.Entity("MemoryArchiveService.Domain.Entities.Memory", b =>
                {
                    b.Navigation("MediaFiles");

                    b.Navigation("MemoryTags");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("MemoryArchiveService.Domain.Entities.Tag", b =>
                {
                    b.Navigation("MemoryTags");
                });
#pragma warning restore 612, 618
        }
    }
}
